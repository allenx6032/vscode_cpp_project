// Autogenerated by gameplay-luagen
#include "gameplay-Base.h"
#include "gameplay-ScriptController.h"
#include "gameplay-lua_PhysicsControllerListener.h"
#include "gameplay-Base.h"
#include "gameplay-Bundle.h"
#include "gameplay-Game.h"
#include "gameplay-MeshPart.h"
#include "gameplay-PhysicsCharacter.h"
#include "gameplay-PhysicsController.h"
#include "gameplay-PhysicsRigidBody.h"
#include "gameplay-ScriptController.h"
#include "gameplay-ScriptTarget.h"
#include "gameplay-Terrain.h"

namespace gameplay
{

static PhysicsController::Listener* getInstance(lua_State* state)
{
    void* userdata = luaL_checkudata(state, 1, "PhysicsControllerListener");
    luaL_argcheck(state, userdata != NULL, 1, "'PhysicsControllerListener' expected.");
    return (PhysicsController::Listener*)((gameplay::ScriptUtil::LuaObject*)userdata)->instance;
}

static int lua_PhysicsControllerListener_statusEvent(lua_State* state)
{
    // Get the number of parameters.
    int paramCount = lua_gettop(state);

    // Attempt to match the parameters to a valid binding.
    switch (paramCount)
    {
        case 2:
        {
            if ((lua_type(state, 1) == LUA_TUSERDATA) &&
                lua_type(state, 2) == LUA_TNUMBER)
            {
                // Get parameter 1 off the stack.
                PhysicsController::Listener::EventType param1 = (PhysicsController::Listener::EventType)luaL_checkint(state, 2);

                PhysicsController::Listener* instance = getInstance(state);
                instance->statusEvent(param1);
                
                return 0;
            }

            lua_pushstring(state, "lua_PhysicsControllerListener_statusEvent - Failed to match the given parameters to a valid function signature.");
            lua_error(state);
            break;
        }
        default:
        {
            lua_pushstring(state, "Invalid number of parameters (expected 2).");
            lua_error(state);
            break;
        }
    }
    return 0;
}

void luaRegister_PhysicsControllerListener()
{
    const luaL_Reg lua_members[] = 
    {
        {"statusEvent", lua_PhysicsControllerListener_statusEvent},
        {NULL, NULL}
    };
    const luaL_Reg* lua_statics = NULL;
    std::vector<std::string> scopePath;
    scopePath.push_back("PhysicsController");

    gameplay::ScriptUtil::registerClass("PhysicsControllerListener", lua_members, NULL, NULL, lua_statics, scopePath);

}

}
